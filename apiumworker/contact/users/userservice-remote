#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from users import userservice
from users.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  UserInfo getUserById(i64 userId,  fields)')
  print('   getUsersById( userIdList,  fields)')
  print('  UserInfo updateUserInfo(i64 userId,  userInfo)')
  print('  UserInfo updateUserRoles(i64 userId, bool addUser,  roles)')
  print('  bool isContact(i64 userA, i64 userB)')
  print('  string sendContactRequest(i64 sender, i64 receiver, string message)')
  print('  void acceptContactRequest(string requestId)')
  print('  void rejectContactRequest(string requestId, string message)')
  print('  void cancelContactRequest(string requestId)')
  print('   getContactRequests(i64 userId, i32 offset, i32 limit)')
  print('  void addContact(i64 userA, i64 userB)')
  print('  void addContacts(i64 userA,  targets)')
  print('  void removeContact(i64 userA, i64 userB)')
  print('  void removeContacts(i64 userA,  targets)')
  print('   getContactList(i64 userId,  fields, i32 offset, i32 count)')
  print('  void updateMemo(i64 userA, i64 userB, string memo)')
  print('  i32 getContactCount(i64 userId)')
  print('  UserInfo login(string loginName, string password, string source)')
  print('  bool verifyCredential(i64 userId, string password)')
  print('  void sendValidationCode(OperationCode action, string tel, i32 countryCode)')
  print('  string checkValidationCode(string code, OperationCode action, string tel, i32 countryCode)')
  print('  void resetPassword(i64 userId, string oldPassword, string newPassword)')
  print('  void resetPasswordByToken(i64 userId, string newPassword, string token)')
  print('  void updateTelNumber(i64 userId, string tel, string token)')
  print('  UserInfo createUser(string nickName, string password,  miscInfo)')
  print('   searchUserInfo( queryFields,  fields, i32 offset, i32 count)')
  print('  ChatGroup createChatGroup(i64 creator,  participants,  chatGroupProps)')
  print('  ChatGroup updateChatGroup(i64 chatGroupId, i64 operatorId,  chatGroupProps)')
  print('  ChatGroup getChatGroup(i64 chatGroupId,  fields)')
  print('   getChatGroups( groupIdList,  fields)')
  print('   getUserChatGroups(i64 userId,  fields, i32 offset, i32 count)')
  print('  i32 getUserChatGroupCount(i64 userId)')
  print('   addChatGroupMembers(i64 chatGroupId, i64 operatorId,  userIds)')
  print('   removeChatGroupMembers(i64 chatGroupId, i64 operatorId,  userIds)')
  print('   getChatGroupMembers(i64 chatGroupId,  fields)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = userservice.Client(protocol)
transport.open()

if cmd == 'getUserById':
  if len(args) != 2:
    print('getUserById requires 2 args')
    sys.exit(1)
  pp.pprint(client.getUserById(eval(args[0]),eval(args[1]),))

elif cmd == 'getUsersById':
  if len(args) != 2:
    print('getUsersById requires 2 args')
    sys.exit(1)
  pp.pprint(client.getUsersById(eval(args[0]),eval(args[1]),))

elif cmd == 'updateUserInfo':
  if len(args) != 2:
    print('updateUserInfo requires 2 args')
    sys.exit(1)
  pp.pprint(client.updateUserInfo(eval(args[0]),eval(args[1]),))

elif cmd == 'updateUserRoles':
  if len(args) != 3:
    print('updateUserRoles requires 3 args')
    sys.exit(1)
  pp.pprint(client.updateUserRoles(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'isContact':
  if len(args) != 2:
    print('isContact requires 2 args')
    sys.exit(1)
  pp.pprint(client.isContact(eval(args[0]),eval(args[1]),))

elif cmd == 'sendContactRequest':
  if len(args) != 3:
    print('sendContactRequest requires 3 args')
    sys.exit(1)
  pp.pprint(client.sendContactRequest(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'acceptContactRequest':
  if len(args) != 1:
    print('acceptContactRequest requires 1 args')
    sys.exit(1)
  pp.pprint(client.acceptContactRequest(args[0],))

elif cmd == 'rejectContactRequest':
  if len(args) != 2:
    print('rejectContactRequest requires 2 args')
    sys.exit(1)
  pp.pprint(client.rejectContactRequest(args[0],args[1],))

elif cmd == 'cancelContactRequest':
  if len(args) != 1:
    print('cancelContactRequest requires 1 args')
    sys.exit(1)
  pp.pprint(client.cancelContactRequest(args[0],))

elif cmd == 'getContactRequests':
  if len(args) != 3:
    print('getContactRequests requires 3 args')
    sys.exit(1)
  pp.pprint(client.getContactRequests(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'addContact':
  if len(args) != 2:
    print('addContact requires 2 args')
    sys.exit(1)
  pp.pprint(client.addContact(eval(args[0]),eval(args[1]),))

elif cmd == 'addContacts':
  if len(args) != 2:
    print('addContacts requires 2 args')
    sys.exit(1)
  pp.pprint(client.addContacts(eval(args[0]),eval(args[1]),))

elif cmd == 'removeContact':
  if len(args) != 2:
    print('removeContact requires 2 args')
    sys.exit(1)
  pp.pprint(client.removeContact(eval(args[0]),eval(args[1]),))

elif cmd == 'removeContacts':
  if len(args) != 2:
    print('removeContacts requires 2 args')
    sys.exit(1)
  pp.pprint(client.removeContacts(eval(args[0]),eval(args[1]),))

elif cmd == 'getContactList':
  if len(args) != 4:
    print('getContactList requires 4 args')
    sys.exit(1)
  pp.pprint(client.getContactList(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'updateMemo':
  if len(args) != 3:
    print('updateMemo requires 3 args')
    sys.exit(1)
  pp.pprint(client.updateMemo(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'getContactCount':
  if len(args) != 1:
    print('getContactCount requires 1 args')
    sys.exit(1)
  pp.pprint(client.getContactCount(eval(args[0]),))

elif cmd == 'login':
  if len(args) != 3:
    print('login requires 3 args')
    sys.exit(1)
  pp.pprint(client.login(args[0],args[1],args[2],))

elif cmd == 'verifyCredential':
  if len(args) != 2:
    print('verifyCredential requires 2 args')
    sys.exit(1)
  pp.pprint(client.verifyCredential(eval(args[0]),args[1],))

elif cmd == 'sendValidationCode':
  if len(args) != 3:
    print('sendValidationCode requires 3 args')
    sys.exit(1)
  pp.pprint(client.sendValidationCode(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'checkValidationCode':
  if len(args) != 4:
    print('checkValidationCode requires 4 args')
    sys.exit(1)
  pp.pprint(client.checkValidationCode(args[0],eval(args[1]),args[2],eval(args[3]),))

elif cmd == 'resetPassword':
  if len(args) != 3:
    print('resetPassword requires 3 args')
    sys.exit(1)
  pp.pprint(client.resetPassword(eval(args[0]),args[1],args[2],))

elif cmd == 'resetPasswordByToken':
  if len(args) != 3:
    print('resetPasswordByToken requires 3 args')
    sys.exit(1)
  pp.pprint(client.resetPasswordByToken(eval(args[0]),args[1],args[2],))

elif cmd == 'updateTelNumber':
  if len(args) != 3:
    print('updateTelNumber requires 3 args')
    sys.exit(1)
  pp.pprint(client.updateTelNumber(eval(args[0]),args[1],args[2],))

elif cmd == 'createUser':
  if len(args) != 3:
    print('createUser requires 3 args')
    sys.exit(1)
  pp.pprint(client.createUser(args[0],args[1],eval(args[2]),))

elif cmd == 'searchUserInfo':
  if len(args) != 4:
    print('searchUserInfo requires 4 args')
    sys.exit(1)
  pp.pprint(client.searchUserInfo(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'createChatGroup':
  if len(args) != 3:
    print('createChatGroup requires 3 args')
    sys.exit(1)
  pp.pprint(client.createChatGroup(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'updateChatGroup':
  if len(args) != 3:
    print('updateChatGroup requires 3 args')
    sys.exit(1)
  pp.pprint(client.updateChatGroup(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'getChatGroup':
  if len(args) != 2:
    print('getChatGroup requires 2 args')
    sys.exit(1)
  pp.pprint(client.getChatGroup(eval(args[0]),eval(args[1]),))

elif cmd == 'getChatGroups':
  if len(args) != 2:
    print('getChatGroups requires 2 args')
    sys.exit(1)
  pp.pprint(client.getChatGroups(eval(args[0]),eval(args[1]),))

elif cmd == 'getUserChatGroups':
  if len(args) != 4:
    print('getUserChatGroups requires 4 args')
    sys.exit(1)
  pp.pprint(client.getUserChatGroups(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'getUserChatGroupCount':
  if len(args) != 1:
    print('getUserChatGroupCount requires 1 args')
    sys.exit(1)
  pp.pprint(client.getUserChatGroupCount(eval(args[0]),))

elif cmd == 'addChatGroupMembers':
  if len(args) != 3:
    print('addChatGroupMembers requires 3 args')
    sys.exit(1)
  pp.pprint(client.addChatGroupMembers(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'removeChatGroupMembers':
  if len(args) != 3:
    print('removeChatGroupMembers requires 3 args')
    sys.exit(1)
  pp.pprint(client.removeChatGroupMembers(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'getChatGroupMembers':
  if len(args) != 2:
    print('getChatGroupMembers requires 2 args')
    sys.exit(1)
  pp.pprint(client.getChatGroupMembers(eval(args[0]),eval(args[1]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
